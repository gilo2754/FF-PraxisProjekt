# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface ErrorInterface {
    "Generic error message"
    message: String
}

type CreateOneUserPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Created document"
    record: User
    "Document ID"
    recordId: MongoID
}

type Mutation {
    "Create one document with mongoose defaults, setters, hooks and validation"
    userCreateOne(record: CreateOneUserInput!): CreateOneUserPayload
    "Create one document with mongoose defaults, setters, hooks and validation"
    x(record: CreateOneUserInput!): CreateOneUserPayload
}

type Query {
    userById(_id: MongoID!): User
    userOneAdmin(
        "Filter by fields"
        filter: FilterFindOneUserInput,
        skip: Int,
        sort: SortFindOneUserInput
    ): User
    userX(
        "Filter by fields"
        filter: FilterFindOneReducedUserCustomQueryInput,
        skip: Int,
        sort: SortFindOneReducedUserCustomQueryInput
    ): ReducedUser
}

type ReducedUser {
    _id: MongoID!
    createdAt: Date
    email: String!
    name: String!
    password: String!
    someOtherField: String
    updatedAt: Date
}

type User {
    _id: MongoID!
    createdAt: Date
    email: String!
    name: String!
    password: String!
    someOtherField: String
    updatedAt: Date
}

enum SortFindOneReducedUserCustomQueryInput {
    EMAIL_ASC
    EMAIL_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneUserInput {
    EMAIL_ASC
    EMAIL_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

input CreateOneUserInput {
    createdAt: Date
    email: String!
    name: String!
    password: String!
    updatedAt: Date
}

input FilterFindOneReducedUserCustomQueryInput {
    AND: [FilterFindOneReducedUserCustomQueryInput!]
    OR: [FilterFindOneReducedUserCustomQueryInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneReducedUserOperatorsCustomQueryInput
    createdAt: Date
    name: String
    password: String
    someOtherField: String
    updatedAt: Date
}

input FilterFindOneReducedUserNameOperatorsCustomQueryInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneReducedUserOperatorsCustomQueryInput {
    _id: FilterFindOneReducedUser_idOperatorsCustomQueryInput
    name: FilterFindOneReducedUserNameOperatorsCustomQueryInput
}

input FilterFindOneReducedUser_idOperatorsCustomQueryInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input FilterFindOneUserEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneUserInput {
    AND: [FilterFindOneUserInput!]
    OR: [FilterFindOneUserInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneUserOperatorsInput
    createdAt: Date
    email: String
    name: String
    password: String
    someOtherField: String
    updatedAt: Date
}

input FilterFindOneUserNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneUserOperatorsInput {
    _id: FilterFindOneUser_idOperatorsInput
    email: FilterFindOneUserEmailOperatorsInput
    name: FilterFindOneUserNameOperatorsInput
}

input FilterFindOneUser_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}


"The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field."
scalar MongoID

scalar Date

"The string representation of JavaScript regexp. You may provide it with flags \"/^abc.*/i\" or without flags like \"^abc.*\". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"
scalar RegExpAsString