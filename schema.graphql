# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface ErrorInterface {
    "Generic error message"
    message: String
}

type CreateOneUserLoginSignupPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Created document"
    record: UserLoginSignup
    "Document ID"
    recordId: MongoID
}

type Mutation {
    login(email: String!, password: String!): UpdateByIdUserAdminPayload
    "Create one document with mongoose defaults, setters, hooks and validation"
    userCreateOne(record: CreateOneUserLoginSignupInput!): CreateOneUserLoginSignupPayload
}

type Query {
    user(
        "Filter by fields"
        filter: FilterFindOneUserPublicInput,
        skip: Int,
        sort: SortFindOneUserPublicInput
    ): UserPublic
    userAdmin(
        "Filter by fields"
        filter: FilterFindOneUserAdminInput,
        skip: Int,
        sort: SortFindOneUserAdminInput
    ): UserAdmin
}

type UpdateByIdUserAdminPayload {
    "Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response."
    error: ErrorInterface
    "Updated document"
    record: UserAdmin
    "Document ID"
    recordId: MongoID
}

"Full User Model. Exposed only for Admins - currently: exposed to every1"
type UserAdmin {
    _id: MongoID!
    createdAt: Date
    email: String!
    favouriteColor: String
    name: String!
    password: String!
    role: EnumUserAdminRole
    "Token of authenticated user"
    token: String
    updatedAt: Date
}

"Login a user or create a new user"
type UserLoginSignup {
    email: String!
    name: String!
    password: String!
}

"Contains all public fields of users. Use this for filtering as well"
type UserPublic {
    favouriteColor: String
    name: String!
}

enum EnumUserAdminRole {
    admin
    user
}

enum SortFindOneUserAdminInput {
    EMAIL_ASC
    EMAIL_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

enum SortFindOneUserPublicInput {
    EMAIL_ASC
    EMAIL_DESC
    NAME_ASC
    NAME_DESC
    _ID_ASC
    _ID_DESC
}

input CreateOneUserLoginSignupInput {
    email: String!
    name: String!
    password: String!
}

input FilterFindOneUserAdminEmailOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

input FilterFindOneUserAdminInput {
    AND: [FilterFindOneUserAdminInput!]
    OR: [FilterFindOneUserAdminInput!]
    _id: MongoID
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneUserAdminOperatorsInput
    createdAt: Date
    email: String
    favouriteColor: String
    name: String
    password: String
    role: EnumUserAdminRole
    updatedAt: Date
}

input FilterFindOneUserAdminNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneUserAdminOperatorsInput {
    _id: FilterFindOneUserAdmin_idOperatorsInput
    email: FilterFindOneUserAdminEmailOperatorsInput
    name: FilterFindOneUserAdminNameOperatorsInput
}

input FilterFindOneUserAdmin_idOperatorsInput {
    exists: Boolean
    gt: MongoID
    gte: MongoID
    in: [MongoID]
    lt: MongoID
    lte: MongoID
    ne: MongoID
    nin: [MongoID]
}

input FilterFindOneUserPublicInput {
    AND: [FilterFindOneUserPublicInput!]
    OR: [FilterFindOneUserPublicInput!]
    "List of *indexed* fields that can be filtered via operators."
    _operators: FilterFindOneUserPublicOperatorsInput
    favouriteColor: String
    name: String
}

input FilterFindOneUserPublicNameOperatorsInput {
    exists: Boolean
    gt: String
    gte: String
    in: [String]
    lt: String
    lte: String
    ne: String
    nin: [String]
    regex: RegExpAsString
}

"For performance reason this type contains only *indexed* fields."
input FilterFindOneUserPublicOperatorsInput {
    name: FilterFindOneUserPublicNameOperatorsInput
}


"The string representation of JavaScript regexp. You may provide it with flags \"/^abc.*/i\" or without flags like \"^abc.*\". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"
scalar RegExpAsString

"The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field."
scalar MongoID

scalar Date